---
import LeftSidebar from '../components/LeftSidebar.astro';
import MainContent from '../components/MainContent.astro';
import RightSidebar from '../components/RightSidebar.astro';
import type { TutorialFile, TutorialSection } from '../types/tutorial';

interface Props {
  title: string;
  currentFile?: TutorialFile;
  sections: TutorialSection[];
  headings?: Array<{id: string, text: string, level: number}>;
}

const { title, currentFile, sections, headings = [] } = Astro.props;
---

<!DOCTYPE html>
<html lang="en" class="dark">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/x-icon" href="/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>{title} | AI Builders Tutorial</title>
    <meta name="description" content="Learn AI development with comprehensive tutorials and hands-on examples." />
    
    <!-- Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&family=Fira+Code:wght@300;400;500;600&display=swap" rel="stylesheet">
    
    <!-- Theme Script (runs before page load) -->
    <script is:inline>
      // Always use dark mode
      document.documentElement.classList.add('dark');
    </script>
  </head>
  
  <body class="bg-dark-bg text-dark-text font-sans antialiased">
    <!-- Mobile Navigation Toggle -->
    <div class="lg:hidden fixed top-0 left-0 right-0 z-50 bg-dark-bg border-b border-dark-border px-4 py-0.5">
      <div class="flex items-center justify-between h-16">
        <div class="flex items-center gap-2">
          <!-- Navigation Toggle -->
          <button
            id="mobile-nav-toggle"
            class="p-1 rounded-lg hover:bg-dark-hover transition-colors"
            aria-label="Toggle navigation"
          >
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"/>
            </svg>
          </button>
          <h1 class="text-sm font-bold m-0 p-0 leading-none">
            <a href="/" class="text-white hover:text-gray-300 transition-colors">
              AI Builders Tutorial
            </a>
          </h1>
        </div>
      </div>
    </div>

    <!-- Mobile Navigation Overlay -->
    <div 
      id="mobile-nav-overlay" 
      class="lg:hidden fixed inset-0 z-40 bg-black bg-opacity-50 hidden"
      onclick="closeMobileNav()"
    ></div>

    <!-- Mobile Table of Contents Overlay -->
    <div 
      id="mobile-toc-overlay" 
      class="lg:hidden fixed inset-0 z-40 bg-black bg-opacity-50 hidden"
      onclick="closeMobileToc()"
    ></div>

    <!-- Scroll to Top Button (Mobile Only) -->
    <button
      id="scroll-to-top"
      class="lg:hidden fixed bottom-6 right-6 z-50 p-3 bg-blue-600 hover:bg-blue-700 text-white rounded-full shadow-xl transition-all duration-300 transform opacity-0 pointer-events-none scale-90"
      aria-label="Scroll to top"
      onclick="scrollToTop()"
    >
      <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" stroke-width="2">
        <path stroke-linecap="round" stroke-linejoin="round" d="M5 10l7-7m0 0l7 7m-7-7v18"/>
      </svg>
    </button>

    <!-- Main Layout Container -->
    <div class="flex min-h-screen lg:pt-0 pt-10">
      <!-- Left Sidebar -->
      <aside 
        id="left-sidebar"
        class="w-80 flex-shrink-0 border-r border-dark-border lg:static fixed left-0 top-0 h-full z-50 bg-dark-bg transform -translate-x-full lg:translate-x-0 transition-transform duration-300 ease-in-out"
      >
        <LeftSidebar sections={sections} currentFile={currentFile} />
      </aside>
      
      <!-- Main Content Area -->
      <main class="flex-1 min-w-0">
        <div class="lg:flex">
          <!-- Tutorial Content -->
          <div class="flex-1 min-w-0">
            <MainContent currentFile={currentFile} />
          </div>
          
          <!-- Right Sidebar (On This Page) -->
          {headings.length > 0 && (
            <aside 
              id="right-sidebar"
              class="lg:w-64 lg:flex-shrink-0 lg:border-l border-dark-border lg:static fixed right-0 top-0 lg:top-0 h-full z-50 bg-dark-bg w-80 transform translate-x-full lg:translate-x-0 transition-transform duration-300 ease-in-out"
            >
              <RightSidebar headings={headings} />
            </aside>
          )}
        </div>
      </main>
    </div>
    
    <!-- Copy to Clipboard Script -->
    <script>
      function copyToClipboard(text) {
        navigator.clipboard.writeText(text).then(() => {
          // Show success feedback
          console.log('Copied to clipboard');
        }).catch(err => {
          console.error('Failed to copy to clipboard:', err);
        });
      }
      
      // Mobile navigation functions
      function openMobileNav() {
        const sidebar = document.getElementById('left-sidebar');
        const overlay = document.getElementById('mobile-nav-overlay');
        if (sidebar && overlay) {
          sidebar.classList.remove('-translate-x-full');
          overlay.classList.remove('hidden');
          document.body.style.overflow = 'hidden';
        }
      }
      
      function closeMobileNav() {
        const sidebar = document.getElementById('left-sidebar');
        const overlay = document.getElementById('mobile-nav-overlay');
        if (sidebar && overlay) {
          sidebar.classList.add('-translate-x-full');
          overlay.classList.add('hidden');
          document.body.style.overflow = '';
        }
      }
      
      function openMobileToc() {
        const sidebar = document.getElementById('right-sidebar');
        const overlay = document.getElementById('mobile-toc-overlay');
        if (sidebar && overlay) {
          sidebar.classList.remove('translate-x-full');
          overlay.classList.remove('hidden');
          document.body.style.overflow = 'hidden';
        }
      }
      
      function closeMobileToc() {
        const sidebar = document.getElementById('right-sidebar');
        const overlay = document.getElementById('mobile-toc-overlay');
        if (sidebar && overlay) {
          sidebar.classList.add('translate-x-full');
          overlay.classList.add('hidden');
          document.body.style.overflow = '';
        }
      }
      
      // Make functions available globally
      window.copyToClipboard = copyToClipboard;
      window.openMobileNav = openMobileNav;
      window.closeMobileNav = closeMobileNav;
      window.openMobileToc = openMobileToc;
      window.closeMobileToc = closeMobileToc;
      
      // Scroll to top functionality
      function scrollToTop() {
        window.scrollTo({
          top: 0,
          behavior: 'smooth'
        });
      }
      
      // Show/hide scroll to top button based on scroll position
      function toggleScrollButton() {
        const scrollButton = document.getElementById('scroll-to-top');
        if (scrollButton) {
          if (window.scrollY > 300) {
            scrollButton.classList.remove('opacity-0', 'pointer-events-none', 'scale-90');
            scrollButton.classList.add('opacity-100', 'scale-100');
          } else {
            scrollButton.classList.add('opacity-0', 'pointer-events-none', 'scale-90');
            scrollButton.classList.remove('opacity-100', 'scale-100');
          }
        }
      }
      
      // Make scroll functions available globally
      window.scrollToTop = scrollToTop;
      
      // Initialize mobile navigation
      document.addEventListener('DOMContentLoaded', () => {
        const navToggle = document.getElementById('mobile-nav-toggle');
        const tocToggle = document.getElementById('mobile-toc-toggle');
        
        if (navToggle) {
          navToggle.addEventListener('click', openMobileNav);
        }
        
        if (tocToggle) {
          tocToggle.addEventListener('click', openMobileToc);
        }
        
        // Add scroll event listener for scroll to top button
        window.addEventListener('scroll', toggleScrollButton);
        
        // Initial check for scroll button visibility
        toggleScrollButton();
        
        // Close mobile menus on resize to desktop
        window.addEventListener('resize', () => {
          if (window.innerWidth >= 1024) { // lg breakpoint
            closeMobileNav();
            closeMobileToc();
          }
        });
        
        // Close mobile menus when clicking on links
        document.addEventListener('click', (e) => {
          if (e.target.matches('a[href^="/tutorials/"]')) {
            closeMobileNav();
            closeMobileToc();
          }
        });
      });
    </script>
  </body>
</html>

<style>
  /* Custom scrollbar styles */
  :global(::-webkit-scrollbar) {
    width: 6px;
  }
  
  :global(::-webkit-scrollbar-track) {
    @apply bg-transparent;
  }
  
  :global(::-webkit-scrollbar-thumb) {
    @apply bg-dark-border rounded-full;
  }
  
  :global(::-webkit-scrollbar-thumb:hover) {
    @apply bg-dark-hover;
  }
  
  /* Notebook cell styles */
  :global(.notebook-cell) {
    @apply mb-6;
  }
  
  :global(.markdown-cell .cell-content) {
    @apply px-4 py-2;
  }
  
  :global(.code-cell) {
    @apply border border-dark-border rounded-lg overflow-hidden;
  }
  
  :global(.cell-input) {
    @apply flex;
  }
  
  :global(.cell-prompt) {
    @apply flex-shrink-0 w-20 p-3 bg-dark-surface border-r border-dark-border text-sm font-mono text-dark-secondary;
  }
  
  :global(.cell-code-container) {
    @apply flex-1 relative;
  }
  
  :global(.cell-code) {
    @apply p-4 bg-dark-surface font-mono text-sm overflow-x-auto;
  }
  
  :global(.cell-output) {
    @apply border-t border-dark-border bg-dark-bg p-4;
  }
  
  :global(.output-stream pre) {
    @apply font-mono text-sm whitespace-pre-wrap;
  }
  
  :global(.output-error) {
    @apply text-red-400;
  }
  
  :global(.output-image img) {
    @apply max-w-full h-auto;
  }
  
  /* Universal typography hierarchy - applies everywhere */
  :global(h1) {
    @apply text-2xl sm:text-3xl lg:text-4xl font-extrabold mb-4 sm:mb-6 text-dark-text;
    margin-top: 2rem;
  }
  
  @media (min-width: 1024px) {
    :global(h1) {
      margin-top: 3rem;
    }
  }
  
  :global(h2) {
    @apply text-xl sm:text-2xl lg:text-3xl font-bold mb-3 sm:mb-4 mt-6 sm:mt-8 text-dark-text;
    margin-top: 2rem;
  }
  
  @media (min-width: 1024px) {
    :global(h2) {
      margin-top: 2.5rem;
    }
  }
  
  :global(h3) {
    @apply text-lg sm:text-xl lg:text-2xl font-semibold mb-2 sm:mb-3 mt-4 sm:mt-6 text-dark-text;
    margin-top: 1.5rem;
  }
  
  @media (min-width: 1024px) {
    :global(h3) {
      margin-top: 2rem;
    }
  }
  
  :global(h4) {
    @apply text-base sm:text-lg lg:text-xl font-semibold mb-2 sm:mb-3 mt-3 sm:mt-5 text-dark-text;
    margin-top: 1.25rem;
  }
  
  @media (min-width: 1024px) {
    :global(h4) {
      margin-top: 1.5rem;
    }
  }
  
  :global(h5) {
    @apply text-base sm:text-lg font-semibold mb-2 mt-3 sm:mt-4 text-dark-text;
    margin-top: 1rem;
  }
  
  @media (min-width: 1024px) {
    :global(h5) {
      margin-top: 1.25rem;
    }
  }
  
  :global(h6) {
    @apply text-sm sm:text-base font-semibold mb-2 mt-2 sm:mt-3 text-dark-text;
    margin-top: 0.75rem;
  }
  
  @media (min-width: 1024px) {
    :global(h6) {
      margin-top: 1rem;
    }
  }
  
  /* Universal paragraph and text styles */
  :global(p) {
    @apply mb-4 sm:mb-6 text-dark-secondary leading-relaxed sm:leading-loose;
    font-size: 0.95rem;
  }
  
  @media (min-width: 640px) {
    :global(p) {
      font-size: 1rem;
    }
  }

  /* Universal list styles based on markdown syntax */
  :global(ul, ol) {
    @apply mb-4 sm:mb-6;
    padding-left: 0;
    list-style: none;
    margin: 1rem 0;
  }
  
  @media (min-width: 640px) {
    :global(ul, ol) {
      margin: 1.5rem 0;
    }
  }
  
  :global(li) {
    @apply mb-2 sm:mb-3 text-dark-secondary leading-relaxed;
    font-size: 0.95rem;
    position: relative;
    padding-left: 1.5rem;
  }
  
  @media (min-width: 640px) {
    :global(li) {
      font-size: 1rem;
    }
  }
  
  /* Bullet points for unordered lists */
  :global(ul li::before) {
    content: "•";
    color: #60a5fa;
    font-weight: bold;
    position: absolute;
    left: 0;
    top: 0;
    font-size: 1.1rem;
  }
  
  /* Numbered lists */
  :global(ol) {
    counter-reset: list-counter;
  }
  :global(ol li) {
    counter-increment: list-counter;
  }
  :global(ol li::before) {
    content: counter(list-counter) ".";
    color: #60a5fa;
    font-weight: bold;
    position: absolute;
    left: 0;
    top: 0;
  }
  
  /* Nested lists */
  :global(ul ul li::before) {
    content: "◦";
    color: #93c5fd;
  }
  :global(ul ul ul li::before) {
    content: "▪";
    color: #ddd6fe;
    font-size: 0.9rem;
  }
  
  
  /* Universal code and inline elements */
  :global(code) {
    @apply bg-light-surface dark:bg-dark-surface px-1.5 sm:px-2 py-1 rounded text-xs sm:text-sm font-mono break-words;
  }
  
  :global(pre) {
    @apply bg-light-surface dark:bg-dark-surface p-3 sm:p-4 rounded-lg overflow-x-auto font-mono text-xs sm:text-sm;
    /* Ensure code blocks don't break the layout on mobile */
    max-width: 100%;
  }
  
  :global(pre code) {
    @apply bg-transparent p-0 text-xs sm:text-sm;
  }
  
  :global(a) {
    @apply text-blue-500 hover:text-blue-400 break-words;
  }
  
  :global(blockquote) {
    @apply border-l-4 border-light-border dark:border-dark-border pl-3 sm:pl-4 italic text-light-secondary dark:text-dark-secondary my-4 sm:my-6;
  }
  
  :global(strong) {
    @apply font-semibold text-light-text dark:text-dark-text;
  }
  
  :global(em) {
    @apply italic text-blue-400;
  }
  
  /* Mobile-specific improvements */
  @media (max-width: 640px) {
    /* Improve touch targets */
    :global(button) {
      min-height: 44px;
      min-width: 44px;
    }
    
    /* Better code block handling on mobile */
    :global(.nb-input) {
      font-size: 12px !important;
    }
    
    :global(.cell-code) {
      padding: 0.75rem !important;
      font-size: 12px !important;
    }
    
    /* Ensure tables are scrollable on mobile */
    :global(table) {
      display: block;
      overflow-x: auto;
      white-space: nowrap;
    }
  }
  
  /* Preserve prose class for specific containers that need it */
  :global(.prose) {
    @apply max-w-none;
  }
</style>

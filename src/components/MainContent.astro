---
import type { TutorialFile } from '../types/tutorial';
import nb from 'notebookjs';

interface Props {
  currentFile?: TutorialFile;
}

const { currentFile } = Astro.props;

// Professional notebook rendering using notebookjs
function renderNotebookWithProfessionalTools(notebook: any): string {
  if (!notebook || !notebook.cells) {
    return '<div class="text-center text-red-400 py-8"><p>Invalid notebook format</p></div>';
  }
  
  try {
    // Create a new notebook renderer instance
    const renderer = nb.parse(notebook);
    const notebookHtml = renderer.render().outerHTML;
    
    // Apply our custom styling to the professional output with copy buttons
    return `
      <div class="professional-notebook">
        <style>
          /* Enhanced notebook styling with working copy buttons and scrolling */
          .professional-notebook .nb-cell {
            margin-bottom: 2rem;
            border-radius: 8px;
            overflow: visible;
            position: relative;
          }
          .professional-notebook .nb-input {
            background-color: rgba(17, 24, 39, 0.6);
            border: 1px solid rgba(75, 85, 99, 0.5);
            border-radius: 8px;
            margin-bottom: 1rem;
            position: relative;
            overflow: visible;
          }
          
          /* Code cells - target cells that have nb-input (which are code cells) */
          .professional-notebook .nb-cell:has(.nb-input) {
            background-color: rgba(17, 24, 39, 0.2);
            border: 1px solid rgba(75, 85, 99, 0.3);
            border-radius: 8px;
            position: relative;
          }
          
          /* Fallback for browsers without :has() support */
          .professional-notebook .nb-input {
            background-color: rgba(17, 24, 39, 0.2);
            border: 1px solid rgba(75, 85, 99, 0.3);
            position: relative;
          }
          
          /* Copy button for code cells */
          .professional-notebook .nb-input::before {
            content: '';
            position: absolute;
            top: 8px;
            right: 8px;
            width: 32px;
            height: 32px;
            background: url('data:image/svg+xml;charset=utf-8,<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="%23a1a1aa"><path stroke-linecap="round" stroke-linejoin="round" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" /></svg>') center/16px no-repeat;
            border-radius: 4px;
            background-color: rgba(55, 65, 81, 0.8);
            cursor: pointer;
            opacity: 0.7;
            transition: all 0.2s ease;
            z-index: 10;
          }
          .professional-notebook .nb-input:hover::before {
            opacity: 1;
            background-color: rgba(75, 85, 99, 0.8);
          }
          .professional-notebook .nb-input::after {
            content: 'Copy code';
            position: absolute;
            top: 45px;
            right: 8px;
            background: rgba(17, 24, 39, 0.95);
            color: #d1d5db;
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 11px;
            font-family: ui-sans-serif, system-ui;
            opacity: 0;
            pointer-events: none;
            transition: opacity 0.2s ease;
            z-index: 10;
            white-space: nowrap;
          }
          .professional-notebook .nb-input:hover::after {
            opacity: 1;
          }
          .copy-success::after {
            content: 'Copied!' !important;
            color: #22c55e !important;
          }
          .professional-notebook .nb-input-prompt {
            background-color: rgba(29, 78, 216, 0.1);
            color: #60a5fa;
            padding: 0.5rem;
            font-family: ui-monospace, monospace;
            font-size: 0.75rem;
            border-right: 1px solid rgba(75, 85, 99, 0.5);
            min-width: 4rem;
          }
          .professional-notebook .nb-output {
            background-color: rgba(17, 24, 39, 0.4);
            border: 1px solid rgba(75, 85, 99, 0.3);
            border-radius: 8px;
            margin-top: 1rem;
          }
          .professional-notebook .nb-output-prompt {
            background-color: rgba(220, 38, 38, 0.1);
            color: #fca5a5;
            padding: 0.5rem;
            font-family: ui-monospace, monospace;
            font-size: 0.75rem;
            border-right: 1px solid rgba(75, 85, 99, 0.5);
            min-width: 4rem;
          }
          .professional-notebook .nb-markdown {
            color: #e5e7eb;
            padding: 1rem;
            line-height: 1.6;
          }
          .professional-notebook .nb-markdown h1 {
            color: #ffffff;
            font-size: 1.875rem;
            font-weight: bold;
            margin-bottom: 2rem;
            border-bottom: 2px solid #3b82f6;
            padding-bottom: 1rem;
          }
          .professional-notebook .nb-markdown h2 {
            color: #ffffff;
            font-size: 1.5rem;
            font-weight: 600;
            margin-bottom: 1.5rem;
            margin-top: 2.5rem;
            border-bottom: 1px solid rgba(75, 85, 99, 0.5);
            padding-bottom: 0.75rem;
          }
          .professional-notebook .nb-markdown h3 {
            color: #ffffff;
            font-size: 1.25rem;
            font-weight: 600;
            margin-bottom: 1rem;
            margin-top: 2rem;
          }
          .professional-notebook .nb-markdown p {
            margin-bottom: 1rem;
            color: #d1d5db;
          }
          .professional-notebook .nb-markdown code {
            background-color: rgba(55, 65, 81, 0.6);
            color: #93c5fd;
            padding: 0.25rem 0.5rem;
            border-radius: 4px;
            font-family: ui-monospace, monospace;
            font-size: 0.875rem;
          }
          .professional-notebook .nb-markdown pre {
            background-color: rgba(17, 24, 39, 0.8);
            border: 1px solid rgba(75, 85, 99, 0.5);
            border-radius: 8px;
            padding: 1rem;
            margin: 1rem 0;
            overflow-x: auto;
            scrollbar-width: thin;
            scrollbar-color: rgba(75, 85, 99, 0.5) transparent;
          }
          .professional-notebook .nb-markdown pre::-webkit-scrollbar {
            height: 8px;
          }
          .professional-notebook .nb-markdown pre::-webkit-scrollbar-track {
            background: rgba(31, 41, 55, 0.5);
            border-radius: 4px;
          }
          .professional-notebook .nb-markdown pre::-webkit-scrollbar-thumb {
            background: rgba(75, 85, 99, 0.5);
            border-radius: 4px;
          }
          .professional-notebook .nb-markdown pre::-webkit-scrollbar-thumb:hover {
            background: rgba(75, 85, 99, 0.7);
          }
          .professional-notebook .nb-markdown pre code {
            background: none;
            padding: 0;
            border-radius: 0;
            color: #e5e7eb;
          }
          /* Enhanced code styling with comprehensive horizontal scrolling */
          .professional-notebook .nb-source {
            color: #e5e7eb;
            font-family: ui-monospace, monospace;
            font-size: 0.875rem;
            line-height: 1.5;
            padding: 1rem;
            white-space: pre;
            overflow-x: auto;
            overflow-y: visible;
            scrollbar-width: thin;
            scrollbar-color: rgba(75, 85, 99, 0.5) transparent;
            word-wrap: normal;
            word-break: normal;
            min-width: 0;
          }
          .professional-notebook .nb-source::-webkit-scrollbar {
            height: 8px;
          }
          .professional-notebook .nb-source::-webkit-scrollbar-track {
            background: rgba(31, 41, 55, 0.5);
            border-radius: 4px;
          }
          .professional-notebook .nb-source::-webkit-scrollbar-thumb {
            background: rgba(75, 85, 99, 0.5);
            border-radius: 4px;
          }
          .professional-notebook .nb-source::-webkit-scrollbar-thumb:hover {
            background: rgba(75, 85, 99, 0.7);
          }
          
          /* Ensure all code elements can scroll horizontally */
          .professional-notebook pre,
          .professional-notebook code {
            overflow-x: auto;
            white-space: pre;
            word-wrap: normal;
            word-break: normal;
          }
          
          /* Fix any containers that might prevent scrolling */
          .professional-notebook .nb-input,
          .professional-notebook .nb-cell {
            overflow: visible;
            min-width: 0;
          }
          .professional-notebook .nb-output-text {
            color: #22c55e;
            font-family: ui-monospace, monospace;
            font-size: 0.875rem;
            padding: 1rem;
            white-space: pre-wrap;
            overflow-x: auto;
            scrollbar-width: thin;
            scrollbar-color: rgba(75, 85, 99, 0.5) transparent;
          }
          .professional-notebook .nb-output-text::-webkit-scrollbar {
            height: 8px;
          }
          .professional-notebook .nb-output-text::-webkit-scrollbar-track {
            background: rgba(31, 41, 55, 0.5);
            border-radius: 4px;
          }
          .professional-notebook .nb-output-text::-webkit-scrollbar-thumb {
            background: rgba(75, 85, 99, 0.5);
            border-radius: 4px;
          }
          .professional-notebook .nb-output-text::-webkit-scrollbar-thumb:hover {
            background: rgba(75, 85, 99, 0.7);
          }
          .professional-notebook .nb-output-error {
            color: #ef4444;
            font-family: ui-monospace, monospace;
            font-size: 0.875rem;
            padding: 1rem;
            white-space: pre-wrap;
            background-color: rgba(220, 38, 38, 0.1);
            overflow-x: auto;
            scrollbar-width: thin;
            scrollbar-color: rgba(75, 85, 99, 0.5) transparent;
          }
          .professional-notebook .nb-output-error::-webkit-scrollbar {
            height: 8px;
          }
          .professional-notebook .nb-output-error::-webkit-scrollbar-track {
            background: rgba(220, 38, 38, 0.2);
            border-radius: 4px;
          }
          .professional-notebook .nb-output-error::-webkit-scrollbar-thumb {
            background: rgba(220, 38, 38, 0.5);
            border-radius: 4px;
          }
          .professional-notebook .nb-output-error::-webkit-scrollbar-thumb:hover {
            background: rgba(220, 38, 38, 0.7);
          }
          .professional-notebook .nb-cell-type-markdown {
            border: none;
            background: none;
          }
          .professional-notebook a {
            color: #60a5fa;
            text-decoration: underline;
          }
          .professional-notebook a:hover {
            color: #93c5fd;
          }
          .professional-notebook ul, .professional-notebook ol {
            margin: 1rem 0;
            padding-left: 1.5rem;
          }
          .professional-notebook li {
            margin-bottom: 0.5rem;
            color: #d1d5db;
          }
        </style>
        ${notebookHtml}
      </div>
    `;
  } catch (error) {
    console.error('Professional notebook rendering failed:', error);
    // Fallback to our custom renderer
    return renderNotebookFallback(notebook);
  }
}

// Fallback renderer in case professional tools fail
function renderNotebookFallback(notebook: any): string {
  if (!notebook || !notebook.cells) {
    return '<div class="text-center text-red-400 py-8"><p>Invalid notebook format</p></div>';
  }
  
  const cellsHtml = notebook.cells.map((cell: any, index: number) => {
    const cellId = `cell-${index}`;
    const source = Array.isArray(cell.source) ? cell.source.join('') : cell.source || '';
    
    switch (cell.cell_type) {
      case 'markdown':
        return renderMarkdownCellFallback(source, cellId);
      case 'code':
        return renderCodeCellFallback(source, cellId, cell.execution_count, cell.outputs);
      default:
        return '';
    }
  }).join('\n');
  
  return cellsHtml;
}

function renderMarkdownCellFallback(source: string | string[], cellId: string): string {
  const sourceText = Array.isArray(source) ? source.join('\n') : source || '';
  
  const markdownHtml = sourceText
    .replace(/^### (.*$)/gim, '<h3 class="text-xl font-semibold mb-4 mt-8 text-white border-b border-gray-700 pb-2">$1</h3>')
    .replace(/^## (.*$)/gim, '<h2 class="text-2xl font-semibold mb-6 mt-10 text-white border-b border-gray-600 pb-3">$1</h2>')
    .replace(/^# (.*$)/gim, '<h1 class="text-3xl font-bold mb-8 text-white border-b-2 border-blue-500 pb-4">$1</h1>')
    .replace(/```(\w+)?\n([\s\S]*?)```/g, '<pre class="bg-gray-900/50 border border-gray-700 rounded-lg p-4 my-4 overflow-x-auto"><code class="text-gray-200 font-mono text-sm">$2</code></pre>')
    .replace(/`([^`]+)`/g, '<code class="bg-gray-800/60 text-blue-300 px-2 py-1 rounded text-sm font-mono">$1</code>')
    .replace(/\*\*(.*?)\*\*/gim, '<strong class="font-semibold text-white">$1</strong>')
    .replace(/\*(.*?)\*/gim, '<em class="italic text-blue-200">$1</em>')
    .replace(/\[([^\]]*)\]\(([^)]*)\)/gim, '<a href="$2" class="text-blue-400 hover:text-blue-300 underline">$1</a>')
    .replace(/^\* (.+)$/gm, '<li class="mb-2 text-gray-300">$1</li>')
    .replace(/^- (.+)$/gm, '<li class="mb-2 text-gray-300">$1</li>')
    .replace(/\n\n/gim, '</p><p class="mb-4 text-gray-300 leading-relaxed">')
    .replace(/^([^<\n].*)$/gm, '<p class="mb-4 text-gray-300 leading-relaxed">$1</p>')
    .replace(/(<li.*<\/li>)/gms, '<ul class="list-disc list-inside mb-4 space-y-1">$1</ul>');
  
  return `
    <div class="notebook-cell markdown-cell mb-8" data-cell-id="${cellId}">
      <div class="cell-content prose prose-dark dark:prose-dark max-w-none">
        ${markdownHtml}
      </div>
    </div>
  `;
}

function renderCodeCellFallback(source: string | string[], cellId: string, executionCount: number | null, outputs: any[]): string {
  const sourceText = Array.isArray(source) ? source.join('\n') : source || '';
  const highlightedCode = highlightPython(sourceText);
  
  let outputsHtml = '';
  if (outputs && outputs.length > 0) {
    const outputContent = outputs.map(output => {
      if (output.output_type === 'stream') {
        const text = Array.isArray(output.text) ? output.text.join('') : output.text || '';
        return `
          <div class="output-stream bg-gray-900/60 border border-gray-600 rounded-lg p-4 mt-4">
            <pre class="text-green-300 font-mono text-sm whitespace-pre-wrap">${text.replace(/</g, '&lt;').replace(/>/g, '&gt;')}</pre>
          </div>
        `;
      }
      return '';
    }).join('\n');
    
    if (outputContent.trim()) {
      outputsHtml = outputContent;
    }
  }
  
  const escapedSource = sourceText.replace(/"/g, '&quot;').replace(/'/g, '&#39;');
  
  return `
    <div class="notebook-cell code-cell mb-8" data-cell-id="${cellId}">
      <div class="code-block relative bg-gray-900/30 border border-gray-700 rounded-lg overflow-hidden">
        <div class="flex items-center justify-between px-4 py-2 bg-gray-800/50 border-b border-gray-700">
          <span class="text-xs text-gray-400 font-mono">Python</span>
          <copy-button class="copy-btn" data-content="${escapedSource}"></copy-button>
        </div>
        <div class="code-content p-4 overflow-x-auto">
          <pre class="language-python text-sm"><code>${highlightedCode}</code></pre>
        </div>
      </div>
      ${outputsHtml}
    </div>
  `;
}

function highlightPython(code: string): string {
  // Simple fallback highlighting for server-side rendering
  // The main highlighting will be done client-side with the professional renderer
  let cleanCode = Array.isArray(code) ? code.join('\n') : code || '';
  
  // Just escape HTML entities for safety
  return cleanCode
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/&/g, '&amp;');
}

// Server-side markdown rendering function
function renderMarkdownSSR(markdown: string): string {
  if (!markdown) return '<div class="text-center text-gray-400 py-8"><p>No content available</p></div>';
  
  // Enhanced markdown parsing with improved styling
  const markdownHtml = markdown
    .replace(/^### (.*$)/gim, '<h3 class="text-xl font-semibold mb-4 mt-8 text-white border-b border-gray-700 pb-2">$1</h3>')
    .replace(/^## (.*$)/gim, '<h2 class="text-2xl font-semibold mb-6 mt-10 text-white border-b border-gray-600 pb-3">$1</h2>')
    .replace(/^# (.*$)/gim, '<h1 class="text-3xl font-bold mb-8 text-white border-b-2 border-blue-500 pb-4">$1</h1>')
    .replace(/```(\w+)?\n([\s\S]*?)```/g, '<pre class="bg-gray-900/50 border border-gray-700 rounded-lg p-4 my-6 overflow-x-auto"><code class="text-gray-200 font-mono text-sm">$2</code></pre>')
    .replace(/`([^`]+)`/g, '<code class="bg-gray-800/60 text-blue-300 px-2 py-1 rounded text-sm font-mono">$1</code>')
    .replace(/\*\*(.*?)\*\*/gim, '<strong class="font-semibold text-white">$1</strong>')
    .replace(/\*(.*?)\*/gim, '<em class="italic text-blue-200">$1</em>')
    .replace(/\[([^\]]*)\]\(([^)]*)\)/gim, '<a href="$2" class="text-blue-400 hover:text-blue-300 underline">$1</a>')
    .replace(/^\* (.+)$/gm, '<li class="mb-2 text-gray-300">$1</li>')
    .replace(/^- (.+)$/gm, '<li class="mb-2 text-gray-300">$1</li>')
    .replace(/\n\n/gim, '</p><p class="mb-4 text-gray-300 leading-relaxed">')
    .replace(/^([^<\n].*)$/gm, '<p class="mb-4 text-gray-300 leading-relaxed">$1</p>')
    .replace(/(<li.*<\/li>)/gms, '<ul class="list-disc list-inside mb-4 space-y-1">$1</ul>');
  
  return markdownHtml;
}

// Content rendering logic
let renderedContent = '';

if (currentFile) {
  if (currentFile.type === 'notebook' && currentFile.notebook) {
    // Use professional notebook rendering with notebookjs
    renderedContent = renderNotebookWithProfessionalTools(currentFile.notebook);
  } else if (currentFile.type === 'markdown' && currentFile.content) {
    // Use enhanced markdown rendering
    renderedContent = renderMarkdownSSR(currentFile.content);
  }
}
---

<div class="h-screen overflow-y-auto">
  {currentFile ? (
    <div class="max-w-4xl mx-auto p-8">
      <!-- Tutorial Header -->
      <header class="mb-8">
        <h1 class="text-4xl font-bold text-light-text dark:text-dark-text mb-2">
          {currentFile.metadata.title}
        </h1>
        
        {currentFile.metadata.description && (
          <p class="text-lg text-light-secondary dark:text-dark-secondary mb-4">
            {currentFile.metadata.description}
          </p>
        )}
        
        <!-- Metadata -->
        <div class="flex items-center gap-6 text-sm text-light-secondary dark:text-dark-secondary">
          {currentFile.metadata.author && (
            <div class="flex items-center gap-2">
              <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z" clip-rule="evenodd" />
              </svg>
              <span>{currentFile.metadata.author}</span>
            </div>
          )}
          
          <div class="flex items-center gap-2">
            <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z" clip-rule="evenodd" />
            </svg>
            <span>Last updated: {new Date(currentFile.metadata.lastUpdated).toLocaleDateString()}</span>
          </div>
          
          <div class="flex items-center gap-2">
            <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
              {currentFile.type === 'notebook' ? (
                <path d="M4 3a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V5a2 2 0 00-2-2H4zm0 2h12v10H4V5zm2 2a1 1 0 000 2h8a1 1 0 100-2H6zm0 3a1 1 0 000 2h8a1 1 0 100-2H6zm0 3a1 1 0 000 2h8a1 1 0 100-2H6z"/>
              ) : (
                <path d="M4 3a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V5a2 2 0 00-2-2H4zm0 2h12v10H4V5zm2 2v6l2-2 2 2V7H6z"/>
              )}
            </svg>
            <span class={`px-2 py-1 rounded text-xs ${
              currentFile.type === 'notebook' 
                ? 'bg-orange-500/20 text-orange-400' 
                : 'bg-blue-500/20 text-blue-400'
            }`}>
              {currentFile.type === 'notebook' ? 'Jupyter Notebook' : 'Markdown'}
            </span>
          </div>
          
          {currentFile.metadata.difficulty && (
            <div class="flex items-center gap-2">
              <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M3 6a3 3 0 013-3h10a1 1 0 01.8 1.6L14.25 8l2.55 3.4A1 1 0 0116 13H6a1 1 0 00-1 1v3a1 1 0 11-2 0V6z" clip-rule="evenodd" />
              </svg>
              <span class={`px-2 py-1 rounded text-xs capitalize ${
                currentFile.metadata.difficulty === 'beginner' ? 'bg-green-500/20 text-green-400' :
                currentFile.metadata.difficulty === 'intermediate' ? 'bg-yellow-500/20 text-yellow-400' :
                'bg-red-500/20 text-red-400'
              }`}>
                {currentFile.metadata.difficulty}
              </span>
            </div>
          )}
        </div>
        
        {currentFile.metadata.tags && currentFile.metadata.tags.length > 0 && (
          <div class="flex items-center gap-2 mt-3">
            <svg class="w-4 h-4 text-light-secondary dark:text-dark-secondary" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M17.707 9.293a1 1 0 010 1.414l-7 7a1 1 0 01-1.414 0l-7-7A.997.997 0 012 10V5a3 3 0 013-3h5c.256 0 .512.098.707.293l7 7zM5 6a1 1 0 100-2 1 1 0 000 2z" clip-rule="evenodd" />
            </svg>
            <div class="flex flex-wrap gap-2">
              {currentFile.metadata.tags.map((tag) => (
                <span class="px-2 py-1 bg-light-surface dark:bg-dark-surface text-light-secondary dark:text-dark-secondary text-xs rounded">
                  {tag}
                </span>
              ))}
            </div>
          </div>
        )}
      </header>
      
      <!-- Tutorial Content -->
      <div class="tutorial-content">
        <div set:html={renderedContent}></div>
      </div>
    </div>
  ) : (
    <!-- No Tutorial Selected -->
    <div class="h-full flex items-center justify-center">
      <div class="text-center max-w-md">
        <div class="mb-6">
          <svg class="w-16 h-16 mx-auto text-light-secondary dark:text-dark-secondary opacity-50" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.746 0 3.332.477 4.5 1.253v13C19.832 18.477 18.246 18 16.5 18c-1.746 0-3.332.477-4.5 1.253" />
          </svg>
        </div>
        
        <h2 class="text-2xl font-bold text-light-text dark:text-dark-text mb-3">
          Welcome to AI Builders Tutorial
        </h2>
        
        <p class="text-light-secondary dark:text-dark-secondary mb-6">
          Select a tutorial from the sidebar to get started with your AI development journey.
        </p>
        
        <div class="text-sm text-light-secondary dark:text-dark-secondary">
          <p class="mb-2">📚 Interactive Jupyter Notebooks</p>
          <p class="mb-2">📖 Comprehensive Markdown Guides</p>
          <p>🔍 Full-text Search</p>
        </div>
      </div>
    </div>
  )}
</div>

<!-- Copy Button Component -->
<copy-button class="hidden">
  <button class="px-3 py-1 bg-light-surface dark:bg-dark-surface hover:bg-light-hover dark:hover:bg-dark-hover border border-light-border dark:border-dark-border rounded text-xs text-light-secondary dark:text-dark-secondary transition-colors">
    Copy
  </button>
</copy-button>

<script>
  // Custom element for copy buttons
  class CopyButton extends HTMLElement {
    constructor() {
      super();
      
      const content = this.getAttribute('data-content') || '';
      
      this.innerHTML = `
        <button class="px-2 py-1 bg-gray-700/50 hover:bg-gray-600/50 border border-gray-600 rounded text-xs text-gray-300 transition-colors flex items-center gap-1">
          <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
          </svg>
          <span class="copy-text">Copy</span>
        </button>
      `;
      
      const button = this.querySelector('button');
      const copyText = this.querySelector('.copy-text');
      
      if (button && copyText) {
        button.addEventListener('click', async () => {
          try {
            await navigator.clipboard.writeText(content);
            copyText.textContent = 'Copied!';
            setTimeout(() => {
              copyText.textContent = 'Copy';
            }, 2000);
          } catch (err) {
            console.error('Failed to copy:', err);
            copyText.textContent = 'Failed';
            setTimeout(() => {
              copyText.textContent = 'Copy';
            }, 2000);
          }
        });
      }
    }
  }
  
  // Register the custom element
  customElements.define('copy-button', CopyButton);
  
  // Python syntax highlighting function (client-side)
  function highlightPythonCode(code) {
    // Escape HTML entities first
    let safeCode = code
      .replace(/&/g, '&amp;')
      .replace(/</g, '&lt;')
      .replace(/>/g, '&gt;');
    
    // Tokenize the code to avoid overlapping replacements
    let tokens = [];
    let lines = safeCode.split('\n');
    
    for (let lineNum = 0; lineNum < lines.length; lineNum++) {
      let line = lines[lineNum];
      let result = '';
      let i = 0;
      
      while (i < line.length) {
        let matched = false;
        
        // Skip whitespace
        if (line[i] === ' ' || line[i] === '\t') {
          result += line[i];
          i++;
          continue;
        }
        
        // Check for comments
        if (line[i] === '#') {
          result += '<span style="color: #6a9955; font-style: italic;">' + line.substring(i) + '</span>';
          break;
        }
        
        // Check for strings
        if (line[i] === '"' || line[i] === "'") {
          let quote = line[i];
          let start = i;
          i++; // Skip opening quote
          while (i < line.length && line[i] !== quote) {
            if (line[i] === '\\') i++; // Skip escaped characters
            i++;
          }
          if (i < line.length) i++; // Include closing quote
          result += '<span style="color: #ce9178;">' + line.substring(start, i) + '</span>';
          matched = true;
        }
        
        // Check for numbers
        else if (/\d/.test(line[i])) {
          let start = i;
          while (i < line.length && /[\d.]/.test(line[i])) i++;
          result += '<span style="color: #b5cea8;">' + line.substring(start, i) + '</span>';
          matched = true;
        }
        
        // Check for identifiers (keywords, functions, etc.)
        else if (/[a-zA-Z_]/.test(line[i])) {
          let start = i;
          while (i < line.length && /[a-zA-Z0-9_]/.test(line[i])) i++;
          let word = line.substring(start, i);
          
          // Check if it's a keyword
          if (['def', 'class', 'import', 'from', 'if', 'elif', 'else', 'for', 'while', 'try', 'except', 'finally', 'with', 'as', 'return', 'yield', 'break', 'continue', 'pass', 'assert', 'del', 'global', 'nonlocal', 'lambda', 'and', 'or', 'not', 'in', 'is', 'async', 'await'].includes(word)) {
            result += '<span style="color: #c586c0; font-weight: 600;">' + word + '</span>';
          }
          // Check if it's a built-in constant
          else if (['True', 'False', 'None'].includes(word)) {
            result += '<span style="color: #569cd6; font-weight: 600;">' + word + '</span>';
          }
          // Check if it's a function call (followed by opening parenthesis)
          else if (i < line.length && line[i] === '(') {
            result += '<span style="color: #dcdcaa;">' + word + '</span>';
          }
          // Regular identifier
          else {
            result += word;
          }
          matched = true;
        }
        
        if (!matched) {
          result += line[i];
          i++;
        }
      }
      
      tokens.push(result);
    }
    
    return tokens.join('\n');
  }
  
  // Add copy functionality and syntax highlighting to professional notebook code cells
  document.addEventListener('DOMContentLoaded', function() {
    console.log('DOM loaded, setting up notebook highlighting...');
    
    // Wait a bit for the notebook to render
    setTimeout(() => {
      console.log('Looking for notebook elements...');
      
      // Target the actual code input elements generated by notebookjs
      const codeInputs = document.querySelectorAll('.professional-notebook .nb-input');
      console.log('Found code inputs:', codeInputs.length);
      
      // Also check for alternative selectors
      const alternativeInputs = document.querySelectorAll('.professional-notebook .nb-cell');
      console.log('Found nb-cell elements:', alternativeInputs.length);
      
      codeInputs.forEach((cell, index) => {
        console.log(`Processing cell ${index}:`, cell);
        
        // Find the source code element - notebookjs uses <pre> elements, not .nb-source
        let sourceElement = cell.querySelector('.nb-source');
        if (!sourceElement) {
          // Try alternative selectors that notebookjs actually uses
          sourceElement = cell.querySelector('pre') || cell.querySelector('code');
        }
        
        if (sourceElement) {
          console.log(`Found source element in cell ${index}:`, sourceElement);
          console.log(`Source content preview:`, sourceElement.textContent.substring(0, 100));
          
          // Get the original code text and store it as a data attribute
          const originalCode = sourceElement.textContent || sourceElement.innerText || '';
          cell.setAttribute('data-original-code', originalCode);
          
          // Apply Python syntax highlighting
          if (originalCode.trim()) {
            console.log(`Applying highlighting to cell ${index}...`);
            const highlightedCode = highlightPythonCode(originalCode);
            console.log(`Highlighted code preview:`, highlightedCode.substring(0, 200));
            sourceElement.innerHTML = highlightedCode;
            console.log(`Applied syntax highlighting to cell ${index}`);
          } else {
            console.log(`No code content found in cell ${index}`);
          }
        } else {
          console.log(`No source element found in cell ${index}`);
        }
        
        // Add click handler for the pseudo-element copy button
        cell.addEventListener('click', function(e) {
          // Check if click is in the copy button area (top-right corner)
          const rect = cell.getBoundingClientRect();
          const clickX = e.clientX - rect.left;
          const clickY = e.clientY - rect.top;
          
          // Copy button area is approximately 40px from right and 40px from top
          if (clickX > rect.width - 40 && clickY < 40) {
            e.preventDefault();
            console.log('Copy button clicked!');
            
            // Get the original code from the data attribute
            const codeText = cell.getAttribute('data-original-code') || '';
            
            if (codeText.trim()) {
              console.log('Copying text:', codeText.substring(0, 50) + '...');
              
              // Copy to clipboard
              if (navigator.clipboard && navigator.clipboard.writeText) {
                navigator.clipboard.writeText(codeText).then(() => {
                  console.log('Copy successful!');
                  // Show success feedback
                  cell.classList.add('copy-success');
                  setTimeout(() => {
                    cell.classList.remove('copy-success');
                  }, 2000);
                }).catch(err => {
                  console.error('Clipboard API failed:', err);
                  fallbackCopy(codeText, cell);
                });
              } else {
                // Fallback for older browsers
                fallbackCopy(codeText, cell);
              }
            } else {
              console.error('No code text found for copying');
            }
          }
        });
        
        // Add hover cursor styling for the copy button area
        cell.addEventListener('mousemove', function(e) {
          const rect = cell.getBoundingClientRect();
          const mouseX = e.clientX - rect.left;
          const mouseY = e.clientY - rect.top;
          
          if (mouseX > rect.width - 40 && mouseY < 40) {
            cell.style.cursor = 'pointer';
          } else {
            cell.style.cursor = 'default';
          }
        });
      });
      
      function fallbackCopy(text, cell) {
        console.log('Using fallback copy method');
        // Create temporary textarea for older browsers
        const textarea = document.createElement('textarea');
        textarea.value = text;
        textarea.style.position = 'fixed';
        textarea.style.opacity = '0';
        document.body.appendChild(textarea);
        textarea.select();
        
        try {
          const successful = document.execCommand('copy');
          if (successful) {
            console.log('Fallback copy successful!');
            cell.classList.add('copy-success');
            setTimeout(() => {
              cell.classList.remove('copy-success');
            }, 2000);
          }
        } catch (err) {
          console.error('Fallback copy failed:', err);
        } finally {
          document.body.removeChild(textarea);
        }
      }
    }, 1000); // Increased timeout to ensure notebook is fully rendered
    
    // Additional attempt with longer timeout in case notebook takes time to render
    setTimeout(() => {
      console.log('Second attempt at syntax highlighting...');
      const codeInputs = document.querySelectorAll('.professional-notebook .nb-input');
      console.log('Second attempt - found code inputs:', codeInputs.length);
      
      codeInputs.forEach((cell, index) => {
        // Try to find source element using the same logic as the first attempt
        let sourceElement = cell.querySelector('.nb-source');
        if (!sourceElement) {
          sourceElement = cell.querySelector('pre') || cell.querySelector('code');
        }
        
        if (sourceElement && !cell.hasAttribute('data-highlighted')) {
          const originalCode = sourceElement.textContent || sourceElement.innerText || '';
          if (originalCode.trim()) {
            console.log(`Second attempt - highlighting cell ${index}`);
            const highlightedCode = highlightPythonCode(originalCode);
            sourceElement.innerHTML = highlightedCode;
            cell.setAttribute('data-highlighted', 'true');
            cell.setAttribute('data-original-code', originalCode);
          }
        }
      });
    }, 2000);
  });
</script>

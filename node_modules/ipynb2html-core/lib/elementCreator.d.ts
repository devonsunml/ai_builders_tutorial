declare type Attributes = {
    [k: string]: string;
};
export declare type MinimalElement = {
    innerHTML: string;
    setAttribute: (name: string, value: string) => void;
    appendChild: (child: any) => unknown;
};
export declare type ElementCreator<TElement = HTMLElement> = ((tag: string, classes?: string[], children?: TElement[] | string) => TElement) & ((tag: string, attrs?: Attributes, children?: TElement[] | string) => TElement);
declare const _default: <TElement extends MinimalElement>(createElement: (tag: string) => TElement, classPrefix?: string) => ElementCreator<TElement>;
/**
 * Returns a function for building `HTMLElement`s.
 *
 * @param {function} createElement A function that creates a new `HTMLElement`
 *   (e.g. `document.createElement.bind(document)`).
 * @param {string} classPrefix The prefix to be used for all CSS class names
 *   except `lang-*`. Default is `nb-`.
 * @template TElement Type of the element object that *createElement* produces.
 */
export default _default;
//# sourceMappingURL=elementCreator.d.ts.map